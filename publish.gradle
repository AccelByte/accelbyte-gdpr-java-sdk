task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'gdpr-sdk'
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'accelbyte-gdpr-java-sdk'
                description = 'GDPR SDK for integrating Java services with AGS (AccelByte Gaming Services) GDPR service.'
                url = 'https://github.com/AccelByte/accelbyte-gdpr-java-sdk'
                inceptionYear = '2023'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'developer'
                        name = 'AccelByte Developer'
                        email = 'developer@accelbyte.net'
                    }
                }
                scm {
                    connection = 'scm:git:git:github.com/AccelByte/accelbyte-gdpr-java-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com/AccelByte/accelbyte-gdpr-java-sdk.git'
                    url = 'https://github.com/AccelByte/accelbyte-gdpr-java-sdk/'
                }
            }
        }
    }
}

if ('publishToSonatype' in gradle.startParameter.taskNames) {
    // https://github.com/gradle-nexus/publish-plugin/issues/81

    apply plugin: 'io.github.gradle-nexus.publish-plugin'

    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
                snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
                username = System.getenv("PUBLISH_OSSRH_USERNAME")
                password = System.getenv("PUBLISH_OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    def signingKey = System.getenv("PUBLISH_ASC_KEY")
    def signingPassword = System.getenv("PUBLISH_ASC_KEY_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}